/****************************************************************************/
/*	File   :             F:\Smoker\SC01study\trunks\src\LCD\lcd.c               */
/*	Author :                       songjiang                                */
/*	Version:                          V1.0                                  */
/*	Date   :                    2019/6/10,14:48:49                         */
/********************************Modify History******************************/
/*   yy/mm/dd     F. Lastname    Description of Modification                */
/****************************************************************************/
/*	Attention:                                                              */
/*	CopyRight:                CopyRight 2017--2025                          */
/*           Shenzhen Xiaojun Technology Co., Ltd.  Allright Reserved        */
/*	Project :                      SC01                           */
/****************************************************************************/
 

/* Includes ------------------------------------------------------------------*/
#include "lcd.h"
#include "pwr.h"
#include "co.h"


#include "stdio.h"




#ifdef SUPPORT_LCD_FUNCTION

/* Private define ------------------------------------------------------------*/

#define LCD_MAX_COM    (4u)
#define  LCD_ONE_CHAR_MAX_SEG	(2u)
#define LCD_MAX_RAM    (8u)

#define  SignalMax	   (19u)
#define  NumberMax	   (3u)

/* Private typedef -----------------------------------------------------------*/

struct Lcd{
    uint8_t State;
	uint8_t LcdMem[LCD_MAX_COM];
};


/* Private macro -------------------------------------------------------------*/

/* Private variables ---------------------------------------------------------*/
static LcdTag LcdObject = {eLcdNULL,{0x00,0x00,0x00,0x00}};
static LcdTag *pLcdObject = NULL;

//SEG_combination{ 0,A ,F ,E ,D ,B,G ,C}
const uint8_t NumberMap[SignalMax] = {                     
	/*	0  1		2		 3			   4   */
	0x7d,  0x05,	0x5e,	0x4f,		0x27,
	/*	5  6		 7		  8 		   9   */  
	0x6b,  0x7b,	0x45,  0x7f,		0x6f, 
	/*null	-		 A		B			 L */
	0x00 ,0x02 ,   0x77,   0x3b,		 0x38,
	/*E   R 		 P		S			 L */
	0x7a ,0x12 ,   0x76,   0x6b, 

};

//  SEG NUM  ARRAY
static uint8_t  PositionColumn[NumberMax] = {4,2,0};


#define LcdGlassWriteMatrixPixel(PixelColumn,PixelRow) (LcdObject.LcdMem[PixelColumn]|= ((uint8_t)0x01<<PixelRow))   	


#define LcdGlassClearMatrixPixel( PixelColumn,PixelRow)  (LcdObject.LcdMem[PixelColumn]&= ~((uint8_t)0x01<<PixelRow))

/* Private function prototypes -----------------------------------------------*/

static void LcdStoreReg(LcdTag *pLcd);

/* Private functions ---------------------------------------------------------*/


/**
  * @brief  lcd pin init to gpio when display off
  * @note   
  *     
  * @param
  * @retval None
  */
static void LcdGpioInit(void)
{
	GPIO_Init(GPIOA, GPIO_Pin_4, GPIO_Mode_Out_PP_Low_Slow);//LCD_COM0
	GPIO_Init(GPIOA, GPIO_Pin_5, GPIO_Mode_Out_PP_Low_Slow);//LCD_COM1
	GPIO_Init(GPIOA, GPIO_Pin_6, GPIO_Mode_Out_PP_Low_Slow);//LCD_COM2
	GPIO_Init(GPIOD, GPIO_Pin_1, GPIO_Mode_Out_PP_Low_Slow);//LCD_COM3
	
	GPIO_Init(GPIOB, GPIO_Pin_3, GPIO_Mode_Out_PP_Low_Slow);//LCD_SEG13
	GPIO_Init(GPIOB, GPIO_Pin_4, GPIO_Mode_Out_PP_Low_Slow);//LCD_SEG14
	GPIO_Init(GPIOB, GPIO_Pin_5, GPIO_Mode_Out_PP_Low_Slow);//LCD_SEG15
	GPIO_Init(GPIOB, GPIO_Pin_6, GPIO_Mode_Out_PP_Low_Slow);//LCD_SEG16
	GPIO_Init(GPIOB, GPIO_Pin_7, GPIO_Mode_Out_PP_Low_Slow);//LCD_SEG17

	GPIO_Init(GPIOD, GPIO_Pin_4, GPIO_Mode_Out_PP_Low_Slow);//LCD_SEG18
	GPIO_Init(GPIOD, GPIO_Pin_5, GPIO_Mode_Out_PP_Low_Slow);//LCD_SEG19
	GPIO_Init(GPIOD, GPIO_Pin_6, GPIO_Mode_Out_PP_Low_Slow);//LCD_SEG20

	GPIO_ResetBits(GPIOA, GPIO_Pin_4);
	GPIO_ResetBits(GPIOA, GPIO_Pin_5);
	GPIO_ResetBits(GPIOA, GPIO_Pin_6);

	GPIO_ResetBits(GPIOB, GPIO_Pin_3);
	GPIO_ResetBits(GPIOB, GPIO_Pin_4);
	GPIO_ResetBits(GPIOB, GPIO_Pin_5);
	GPIO_ResetBits(GPIOB, GPIO_Pin_6);
	GPIO_ResetBits(GPIOB, GPIO_Pin_7);

	GPIO_ResetBits(GPIOD, GPIO_Pin_1);
	GPIO_ResetBits(GPIOD, GPIO_Pin_4);
	GPIO_ResetBits(GPIOD, GPIO_Pin_5);
	GPIO_ResetBits(GPIOD, GPIO_Pin_6);

	GPIO_Init(LCD_BACK_LIGHT_PORT, LCD_BACK_LIGHT_PIN, GPIO_Mode_Out_PP_Low_Slow);	//lcd backlight
	//GPIO_Init(LCD_POWER_PORT, LCD_POWER_PIN, GPIO_Mode_Out_PP_Low_Slow);			//lcd power

	LCD_BACK_LIGHT_OFF();
	//LCD_POWER_OFF();

	//printflog("lcd init\n");
}

void LcdSetMem(uint8_t data)
{
		uint8_t i = 0;
		LcdTag *pLcd = &LcdObject;
		for (i = 0; i < LCD_MAX_COM; ++i)
		{
			pLcd->LcdMem[i] = data;
		}
		LcdStoreReg(pLcd);

}
/**
  * @brief  display all seg
  * @note   
  *     
  * @param  data:display data
  * @retval None
  */
static void LcdStoreReg(LcdTag *pLcd)
{
    
    uint8_t map[LCD_MAX_RAM] = {LCD_RAMRegister_1,LCD_RAMRegister_2,LCD_RAMRegister_5,LCD_RAMRegister_6,
		LCD_RAMRegister_8,LCD_RAMRegister_9,LCD_RAMRegister_12,LCD_RAMRegister_13}; 
	uint8_t i = 0;
	uint8_t temp= 0;
	uint8_t LcdRam[LCD_MAX_RAM] = {0};
	for (i = 0; i < LCD_MAX_COM; ++i)//com
	{
		temp = pLcd->LcdMem[i];
		switch (i)
		{
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//start lcd com
			//start
			case 0: 
				//					13				14				15			
				LcdRam[0] |=((temp&0x80)>>2)+((temp&0x40)<<0)+((temp&0x20)<<2);
				//					16				17				18				19				20
				LcdRam[1] |=((temp&0x10)>>4)+((temp&0x08)>>2)+((temp&0x04)<<0)+((temp&0x02)<<2)+((temp&0x01)<<4);
				break;				
			case 1:
				//					13				14				15				16			19				18				17
				LcdRam[2] |=((temp&0x80)>>6)+((temp&0x40)>>4)+((temp&0x20)>>2)+(temp&0x10)+((temp&0x02)<<6)+((temp&0x04)<<4)+((temp&0x08)<<2);
				LcdRam[3] |=((temp&0x01)<<0);//20
				break;
										
			case 2:
				//					13				14				15			
				LcdRam[4] |=((temp&0x80)>>2)+((temp&0x40)<<0)+((temp&0x20)<<2);
				//					16				17				18				19				20
				LcdRam[5] |=((temp&0x10)>>4)+((temp&0x08)>>2)+((temp&0x04)<<0)+((temp&0x02)<<2)+((temp&0x01)<<4);
				break;
									
			case 3:
				//					13				14				15				16			19				18					17
				LcdRam[6] |=((temp&0x80)>>6)+((temp&0x40)>>4)+((temp&0x20)>>2)+(temp&0x10)+((temp&0x02)<<6)+((temp&0x04)<<4)+((temp&0x08)<<2);
				LcdRam[7] |=((temp&0x01)<<0);//20
            	break;
	
//end
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			default:
				break;			
		}	



	}

	LCD_ClearFlag();
	while(LCD_GetFlagStatus() !=RESET)
	{
		;
	}
	
	for (i = 0; i < LCD_MAX_RAM; ++i)
	{
		LCD->RAM[map[i]] = LcdRam[i];

//		LCD_WriteRAM(map[i], LcdRam[i]);
		//printf("LcdRam[%d] = 0x%x\n",map[i],LcdRam[i]);
		//printf("Ram[%d] = 0x%x\n",map[i],LCD->RAM[map[i]]);
	}
}

/**
  * @brief  display string
  * @note   display special string
  *     
  * @param  string_index:string index
  * @retval None
  */
int LcdDisplayString(uint8_t *pstr,uint8_t start,uint8_t end)
{
	int ret = -1;
	uint8_t i = start;
	int8_t* ptr = (int8_t*)pstr;
	
	while (i <=end)
	{		
		int8_t* ch = ptr;
		uint8_t Num = (uint8_t)(*ch-'0');
		uint8_t Position = i;
		uint8_t p = 0;//mem position
		uint8_t c = NumberMap[Num]; // for codec
		//printf("c = 0x%x\n",c);
		c = c<<1;// for first position
		//printf("1 c = 0x%x\n",c);
		//printf("ch = %c\n",*ch);
		if ((*ch <= LCD_DIS_S)&&(*ch >= ASCII_NUM_0))
		{
			uint8_t temp = 0;
			uint8_t x = 0;
			uint8_t y = 0;
			p = PositionColumn[Position];
			for (y = 0; y < LCD_ONE_CHAR_MAX_SEG; ++y)
			{
				for( x = 0;x<LCD_MAX_COM;++x)
				{
					//clear bit no first position
					if (y==0&&x==0)
					{
						;
					}
					else
					{
						temp = ~((uint8_t)0x01<<(p+y));
						LcdObject.LcdMem[x] &= temp;
					}
				  
				  //get bit 
				  temp = ((uint8_t)((c&(0x01<<x))>>x)<<(p+y));
				  LcdObject.LcdMem[x] |= temp;
				 // printf("LcdMem[%d] = 0x%x\n",x,LcdObject.LcdMem[x]);
				} 
				c = c>>4;//for second seg
			}

		#if 0	
			uint8_t Flag = 1;	  
			//even bit	  
			p = PositionColumn[Position];
			//even bit
			temp = LcdMem[p];  
			temp &=~((uint8_t)(0x07<<Flag));
			temp |= ((uint8_t)(c&0x07)<<Flag); 
			LcdMem[p] = temp;
			//odd bit
			temp = LcdMem[p+1];
			temp &=~((uint8_t)0x0f);
			temp |= ((uint8_t)(c>>3));
			LcdMem[p+1] = temp; 
		#endif
		}
	ptr++;
	i++;
	}
  LcdStoreReg(&LcdObject);
  return ret;
}


/**
  * @brief  display point
  * @note   
  *     
  * @param
  * @retval None
  */
void LcdDisplayPoint(eLcdPointState eType,uint8_t com,uint8_t seg)
{
 	switch(eType)
	{
		case eLcdPointOFF:		
			LcdGlassClearMatrixPixel(com, seg);
		break;
		
		case eLcdPointON:		
			LcdGlassWriteMatrixPixel(com, seg);
		break;
		
		default:
		break;
	}	
	LcdStoreReg(&LcdObject);
        
}


/**
  * @brief  lcd reg init
  *           
  * @param  None
  * @retval None
  */
void LcdRegInit(void)
{
	/*
	  The LCD is configured as follow:
	   - clock source = LSI (38 KHz)
	   - Voltage source = Internal
	   - Prescaler = 2
	   - Divider = 31(15+16)  
	   - Mode = 1/4 Duty, 1/3 Bias
	   - LCD frequency = clock source  / (Prescaler * Divider)
					   = 613 Hz ==> Frame frequency = LCD frequency*duty = 154 Hz*/
	
	  /* Enable LCD clock */
	  CLK_PeripheralClockConfig(CLK_Peripheral_LCD, ENABLE);   
//	  CLK_PeripheralClockConfig(CLK_Peripheral_RTC,ENABLE);
	
	  /* Initialize the LCD */
//	  LCD_Init(LCD_Prescaler_2, LCD_Divider_31, LCD_Duty_1_4,
//			 LCD_Bias_1_3, LCD_VoltageSource_Internal);

	  LCD_Init(LCD_Prescaler_2, LCD_Divider_31, LCD_Duty_1_4,
			 LCD_Bias_1_3, LCD_VoltageSource_External);	


	  /* Mask register*/
	  //LCD_PortMaskConfig(LCD_PortMaskRegister_0, 0xFF);
	  LCD_PortMaskConfig(LCD_PortMaskRegister_1, 0xE0); 	  //seg13-seg15
	  LCD_PortMaskConfig(LCD_PortMaskRegister_2, 0x1F); 	  //seg16-seg20
	  //LCD_PortMaskConfig(LCD_PortMaskRegister_3, 0xFF);
	  //LCD_PortMaskConfig(LCD_PortMaskRegister_4, 0xFF);
	  //LCD_PortMaskConfig(LCD_PortMaskRegister_5, 0x0F);
	
	  LCD_ContrastConfig(LCD_Contrast_Level_3);
	  //LCD_HighDriveCmd(ENABLE);

//	  LCD_ITConfig(ENABLE);

	  
	  LCD_DeadTimeConfig(LCD_DeadTime_1);
	  LCD_PulseOnDurationConfig(LCD_PulseOnDuration_1);
	
	  LCD_BlinkConfig(LCD_BlinkMode_Off, LCD_BlinkFrequency_Div32);
		  
	  LCD_Cmd(ENABLE); /*!< Enable LCD peripheral */	
}


/**
  * @brief  lcd init
  *           
  * @param  None
  * @retval None
  */
LcdTag * LcdInit(void)
{	
	if (NULL == pLcdObject)
	{   
		LcdGpioInit();
		LcdRegInit();	

		pLcdObject = &LcdObject;	
	}
	else
	{
		;
	}
	return pLcdObject;
}



#if 0
void LcdTest(void)
{
    uint8_t map[LCD_MAX_RAM] = {LCD_RAMRegister_1,LCD_RAMRegister_2,LCD_RAMRegister_5,LCD_RAMRegister_6,
		LCD_RAMRegister_8,LCD_RAMRegister_9,LCD_RAMRegister_12,LCD_RAMRegister_13}; 

	uint8_t LcdStr[][4] ={ "000","111","222","333","444","555","666","777","888","999",
		{LCD_DIS_A,LCD_DIS_A,LCD_DIS_A,LCD_DIS_A},
		{LCD_DIS_B,LCD_DIS_B,LCD_DIS_B,LCD_DIS_B},
		{LCD_DIS_E,LCD_DIS_E,LCD_DIS_E,LCD_DIS_E},
		{LCD_DIS_L,LCD_DIS_L,LCD_DIS_L,LCD_DIS_L},
		{LCD_DIS_P,LCD_DIS_P,LCD_DIS_P,LCD_DIS_P},
		{LCD_DIS_R,LCD_DIS_R,LCD_DIS_R,LCD_DIS_R},
		{LCD_DIS_S,LCD_DIS_S,LCD_DIS_S,LCD_DIS_S},
		{LCD_DIS_LINE,LCD_DIS_LINE,LCD_DIS_LINE,LCD_DIS_LINE},
		{LCD_DIS_NULL,LCD_DIS_NULL,LCD_DIS_NULL,LCD_DIS_NULL}};
	static uint8_t i = 0;
	static uint8_t j = 0;
	#if 1
	LCD_Clear();
	LcdDisplayString(&(LcdStr[i][0]),0,2);
	if(++i>(sizeof(LcdStr)/sizeof(LcdStr[0])))
	{
		i = 0;
	}
	#if 1
	LcdDisplayPoint(eLcdPointON,LCD_BATTERY_COM,LCD_BATTERY_SEG);
	LcdDisplayPoint(eLcdPointON,LCD_BATTERY_LEVEL1_COM,LCD_BATTERY_LEVEL1_SEG);
	LcdDisplayPoint(eLcdPointON,LCD_BATTERY_LEVEL2_COM,LCD_BATTERY_LEVEL2_SEG);
	LcdDisplayPoint(eLcdPointON,LCD_BATTERY_LEVEL3_COM,LCD_BATTERY_LEVEL3_SEG);
	LcdDisplayPoint(eLcdPointON,LCD_CO_COM,LCD_CO_SEG);
	LcdDisplayPoint(eLcdPointON,LCD_CO_PPM_COM,LCD_CO_PPM_SEG);
	LcdDisplayPoint(eLcdPointON,LCD_GAS_COM,LCD_GAS_SEG);
	LcdDisplayPoint(eLcdPointON,LCD_OUT_PWR_COM,LCD_OUT_PWR_SEG);
	LcdDisplayPoint(eLcdPointON,LCD_TWO_FLOAT_COM,LCD_TWO_FLOAT_SEG);
	LcdDisplayPoint(eLcdPointON,LCD_ONE_FLOAT_COM,LCD_ONE_FLOAT_SEG);
	LcdDisplayPoint(eLcdPointON,LCD_PERCENT_COM,LCD_PERCENT_SEG);
	#endif
	#else
		if (j<LCD_MAX_RAM)
	{
	
		LCD_WriteRAM(map[j],0xff);	
		printf("RAM[%d] = 0x%x   ",map[j],LCD->RAM[map[j]]);
		j++;
	}else
	{	
		LCD_Clear();
		j = 0;
	}
	#endif

	
#if 0
	for (i = 0; i < LCD_MAX_COM; ++i)
	{
		printf("lcdmem[%d] = 0x%x   ",i,LcdObject.LcdMem[i]);
		
	}
	//printf("\n");
#endif
	
}
#endif

uint8_t * INT16ToStr(uint16_t num)
{
   int8_t i;
   #define LCD_MAX_STR  (4)
   static uint8_t str[LCD_MAX_STR];
   
   num = num%10000;
   //printf("num = %d\n",num);
   for(i = (LCD_MAX_STR-1); i >= 0; i--) 
   {   //   4 str
	   str[i] = num%10 + '0';
	   num/=10;  
	   //printf("str[%d] = %c\n",i,str[i]);
   }
   // for start 0 no display
   for (i = 0; i < (LCD_MAX_STR-1); ++i)
   {
	   if (str[i]=='0')
	   {
	   		str[i] = LCD_DIS_NULL;
	   }else
	   {
	   		break;
	   }
   }
   return str;
}


void LCD_Clear(void)
{
	LcdSetMem(DISPLAY_CLEAR);
}


void LCD_Control(eLcdState state)
{
		switch(state)
		{
			case eLcdON:
              	LCD_Cmd(ENABLE);
				break;
	
			case eLcdOFF:
				LCD_Clear();
				LCD_Cmd(DISABLE); 
				break;
		}
}



void LCD_DisplayNum(uint16_t num)
{

	char buf[10] = {0};
    uint8_t pos = 0;
	char strNull[4] ={LCD_DIS_NULL,LCD_DIS_NULL,LCD_DIS_NULL,LCD_DIS_NULL};

	LcdDisplayPoint(eLcdPointON,LCD_CO_COM,LCD_CO_SEG);//
	LcdDisplayPoint(eLcdPointON,LCD_CO_PPM_COM,LCD_CO_PPM_SEG);//
	LcdDisplayString((uint8_t*)strNull,0,2);

	if(num > 999)
	{
		num = 999;
	}else
	{
		;
	}

	if(num<10)
	{
		pos = 2;
	}
	else if((num>=10)&&(num<100))
	{
		pos = 1;	
	}
	else if((num>=100)&&(num<1000))
	{		
		pos = 0;
	}
	sprintf(buf,"%d",num);
	LcdDisplayString((uint8_t*)buf,pos,2);//��ʾ�ַ�

}

/*
void LCD_DsiplayCoFlg(void)
{
	LcdDisplayPoint(eLcdPointON,LCD_CO_COM,LCD_CO_SEG);
	LcdDisplayPoint(eLcdPointON,LCD_CO_PPM_COM,LCD_CO_PPM_SEG);
}
*/
void LCD_DsiplayCoFlg(eLcdState control)
{
	switch(control)
	{
		case eLcdON://
			LcdDisplayPoint(eLcdPointON,LCD_CO_COM,LCD_CO_SEG);
			LcdDisplayPoint(eLcdPointON,LCD_CO_PPM_COM,LCD_CO_PPM_SEG);
			break;

		case eLcdOFF://
			LcdDisplayPoint(eLcdPointOFF,LCD_CO_COM,LCD_CO_SEG);
			LcdDisplayPoint(eLcdPointOFF,LCD_CO_PPM_COM,LCD_CO_PPM_SEG);
			break;
	}
}


void LCD_DisplayCoData(uint16_t num)
{
	LCD_DisplayNum(num);
}


void LCD_DisplayBatteryData(uint8_t level)
{
	LcdDisplayPoint(eLcdPointON,LCD_BATTERY_COM,LCD_BATTERY_SEG);
	switch(level)
	{
		case eLcdBatteryFlgLevel_Null://null
			LcdDisplayPoint(eLcdPointOFF,LCD_BATTERY_LEVEL1_COM,LCD_BATTERY_LEVEL1_SEG);
			LcdDisplayPoint(eLcdPointOFF,LCD_BATTERY_LEVEL2_COM,LCD_BATTERY_LEVEL2_SEG);
		    LcdDisplayPoint(eLcdPointOFF,LCD_BATTERY_LEVEL3_COM,LCD_BATTERY_LEVEL3_SEG);
			break;

		case eLcdBatteryFlgLevel_1://level_1
			LcdDisplayPoint(eLcdPointON,LCD_BATTERY_LEVEL1_COM,LCD_BATTERY_LEVEL1_SEG);
			LcdDisplayPoint(eLcdPointOFF,LCD_BATTERY_LEVEL2_COM,LCD_BATTERY_LEVEL2_SEG);
		    LcdDisplayPoint(eLcdPointOFF,LCD_BATTERY_LEVEL3_COM,LCD_BATTERY_LEVEL3_SEG);
			break;	
		
		case eLcdBatteryFlgLevel_2://level_2
			LcdDisplayPoint(eLcdPointON,LCD_BATTERY_LEVEL1_COM,LCD_BATTERY_LEVEL1_SEG);
			LcdDisplayPoint(eLcdPointON,LCD_BATTERY_LEVEL2_COM,LCD_BATTERY_LEVEL2_SEG);
		    LcdDisplayPoint(eLcdPointOFF,LCD_BATTERY_LEVEL3_COM,LCD_BATTERY_LEVEL3_SEG);
			break;
		
		case eLcdBatteryFlgLevel_3://level_3
			LcdDisplayPoint(eLcdPointON,LCD_BATTERY_LEVEL1_COM,LCD_BATTERY_LEVEL1_SEG);
			LcdDisplayPoint(eLcdPointON,LCD_BATTERY_LEVEL2_COM,LCD_BATTERY_LEVEL2_SEG);
			LcdDisplayPoint(eLcdPointON,LCD_BATTERY_LEVEL3_COM,LCD_BATTERY_LEVEL3_SEG);
			break;
		case eLcdBatteryFlgOff://off
			LcdDisplayPoint(eLcdPointOFF,LCD_BATTERY_COM,LCD_BATTERY_SEG);
			LcdDisplayPoint(eLcdPointOFF,LCD_BATTERY_LEVEL1_COM,LCD_BATTERY_LEVEL1_SEG);
			LcdDisplayPoint(eLcdPointOFF,LCD_BATTERY_LEVEL2_COM,LCD_BATTERY_LEVEL2_SEG);
		    LcdDisplayPoint(eLcdPointOFF,LCD_BATTERY_LEVEL3_COM,LCD_BATTERY_LEVEL3_SEG);
			break;
	}
}


void LCD_SystemStartAnimation(uint8_t line)
{
	switch(line)
	{
		case 0:
			LcdDisplayPoint(eLcdPointON,LCD_DIS_LINE_COM,LCD_DIS_LINE1_SEG);
			LcdDisplayPoint(eLcdPointOFF,LCD_DIS_LINE_COM,LCD_DIS_LINE2_SEG);
			LcdDisplayPoint(eLcdPointOFF,LCD_DIS_LINE_COM,LCD_DIS_LINE3_SEG);
			break;

		case 1:
			LcdDisplayPoint(eLcdPointON,LCD_DIS_LINE_COM,LCD_DIS_LINE1_SEG);
			LcdDisplayPoint(eLcdPointON,LCD_DIS_LINE_COM,LCD_DIS_LINE2_SEG);
			LcdDisplayPoint(eLcdPointOFF,LCD_DIS_LINE_COM,LCD_DIS_LINE3_SEG);
			break;

		case 2:
			LcdDisplayPoint(eLcdPointON,LCD_DIS_LINE_COM,LCD_DIS_LINE1_SEG);
			LcdDisplayPoint(eLcdPointON,LCD_DIS_LINE_COM,LCD_DIS_LINE2_SEG);
			LcdDisplayPoint(eLcdPointON,LCD_DIS_LINE_COM,LCD_DIS_LINE3_SEG);
			break;
	}
	
}


void LCD_BackLightControl(eLcdState state)
{
	switch(state)
	{
		case eLcdBackLightON:
			//LCD_POWER_ON(); 						//lcd power on
			LCD_BACK_LIGHT_ON();
			break;

		case eLcdBackLightOFF:
			LCD_BACK_LIGHT_OFF();
			break;
	}

}


void LCD_DsiplayStr(eLcdStr str, uint8_t start,uint8_t end)
{
	switch(str)
	{
		case eStr_End:
			{
				uint8_t str_E[3] = {LCD_DIS_E,LCD_DIS_NULL,LCD_DIS_NULL};//"End"
    			LcdDisplayString(str_E,0,2);	//End		
    			LcdDisplayPoint(eLcdPointON,LCD_DIS_0_COM,LCD_DIS_3D_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_2C_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_2E_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_3C_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_3E_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_2_COM,LCD_DIS_2G_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_2_COM,LCD_DIS_3G_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_3B_SEG);
			}
			break;

		case eStr_Err:
			{
				uint8_t str_Err[3] = {LCD_DIS_E,LCD_DIS_R,LCD_DIS_R};//"Err"
				LcdDisplayString(str_Err,0,2);	//Err
			}
			break;

		case eStr_LINE:
			{
				uint8_t str_LINE[3] = {LCD_DIS_LINE,LCD_DIS_LINE,LCD_DIS_LINE};//"-"
				LcdDisplayString(str_LINE,start,end);//-
			}
			break;

		case eStr_Lb:
			{
				uint8_t str_Lb[3] = {LCD_DIS_L,LCD_DIS_B,LCD_DIS_NULL};//"Lb "
				LcdDisplayString(str_Lb,0,2);	//Lb
			}
			break;
		
		case eStr_PAS:
			{
				uint8_t str_PAS[3] = {LCD_DIS_P,LCD_DIS_A,LCD_DIS_S};//"PAS"
				LcdDisplayString(str_PAS,0,2);	//PAS
			}
			break;

		case eStr_E06:
			{
				uint8_t str_E06[3] = {LCD_DIS_E,ASCII_NUM_0,LCD_DIS_NULL};//E06
				LcdDisplayString(str_E06,0,2);	
				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_3A_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_3C_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_0_COM,LCD_DIS_3D_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_3E_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_2_COM,LCD_DIS_3F_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_2_COM,LCD_DIS_3G_SEG);
			}
			break;

		case eStr_E07:
			{
				uint8_t str_E07[3] = {LCD_DIS_E,ASCII_NUM_0,LCD_DIS_NULL};//E07
				LcdDisplayString(str_E07,0,2);	
				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_3A_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_3B_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_3C_SEG);
			}
			break;

		case eStr_E08:
			{
				uint8_t str_E08[3] = {LCD_DIS_E,ASCII_NUM_0,LCD_DIS_NULL};//E08
				LcdDisplayString(str_E08,0,2);	
				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_3A_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_3B_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_3C_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_0_COM,LCD_DIS_3D_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_3E_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_2_COM,LCD_DIS_3F_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_2_COM,LCD_DIS_3G_SEG);
			}
			break;
		
		case eStr_E09:
			{
				uint8_t str_E09[3] = {LCD_DIS_E,ASCII_NUM_0,LCD_DIS_NULL};//E09
				LcdDisplayString(str_E09,0,2);	
				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_3A_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_3B_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_3C_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_0_COM,LCD_DIS_3D_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_2_COM,LCD_DIS_3F_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_2_COM,LCD_DIS_3G_SEG);
			}
			break;

		case eStr_E10:
			{
				uint8_t str_E10[3] = {LCD_DIS_E,LCD_DIS_NULL,ASCII_NUM_0};//E10
				LcdDisplayString(str_E10,0,2);	
				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_2B_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_2C_SEG);
			}
			break;
		
		case eStr_E11:
			{
				uint8_t str_E11[3] = {LCD_DIS_E,LCD_DIS_NULL,LCD_DIS_NULL};//E11
				LcdDisplayString(str_E11,0,2);	
				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_2B_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_2C_SEG);

				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_3B_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_3C_SEG);
			}
			break;
		
		case eStr_E12:
			{
				uint8_t str_E12[3] = {LCD_DIS_E,LCD_DIS_NULL,LCD_DIS_NULL};//E12
				LcdDisplayString(str_E12,0,2);	
				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_2B_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_2C_SEG);

				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_3A_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_3_COM,LCD_DIS_3B_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_0_COM,LCD_DIS_3D_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_1_COM,LCD_DIS_3E_SEG);
				LcdDisplayPoint(eLcdPointON,LCD_DIS_2_COM,LCD_DIS_3G_SEG);
			}
			break;
	}
}


void LCDStandyDisplay(void)
{
	LCD_Clear();
	BatteryLcdDisplay();
	LCD_DsiplayCoFlg(eLcdON);
	LCD_DisplayNum(0);
	
}













#endif          //#ifdef SUPPORT_LCD_FUNCTION





/********************END OF FILE**********************/


